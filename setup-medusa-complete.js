const axios = require('axios');

const MEDUSA_URL = 'http://localhost:9000';
const ADMIN_EMAIL = 'admin@storybox.bg';
const ADMIN_PASSWORD = 'Pandora2019+';

async function setupMedusaComplete() {
  try {
    // 1. Login as admin
    console.log('üîê Logging in as admin...');
    const authResponse = await axios.post(`${MEDUSA_URL}/auth/user/emailpass`, {
      email: ADMIN_EMAIL,
      password: ADMIN_PASSWORD,
    });

    const token = authResponse.data.token;
    console.log('‚úÖ Logged in successfully');

    // Set up axios with auth header
    const api = axios.create({
      baseURL: MEDUSA_URL,
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    // 2. Get or create sales channel
    console.log('\nüì¶ Setting up sales channel...');
    let salesChannelId;
    try {
      const channelsResponse = await api.get('/admin/sales-channels');
      if (channelsResponse.data.sales_channels && channelsResponse.data.sales_channels.length > 0) {
        salesChannelId = channelsResponse.data.sales_channels[0].id;
        console.log('‚úÖ Using existing sales channel:', salesChannelId);
      } else {
        const createChannelResponse = await api.post('/admin/sales-channels', {
          name: 'Web Storefront',
          description: 'Main e-commerce storefront'
        });
        salesChannelId = createChannelResponse.data.sales_channel.id;
        console.log('‚úÖ Sales channel created:', salesChannelId);
      }
    } catch (error) {
      console.error('‚ùå Sales channel error:', error.response?.data || error.message);
      console.log('‚ö†Ô∏è  Continuing without sales channel...');
    }

    // 3. Create products
    console.log('\nüõçÔ∏è  Creating products...');
    
    const products = [
      {
        title: '–ë—Ä–∞–Ω–¥–∏—Ä–∞–Ω–∏ —Ç–µ–Ω–∏—Å–∫–∏ —Å –±—Ä–æ–¥–µ—Ä–∏—è',
        handle: 'brandirani-teniski-s-broderia',
        description: '–í–∏—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–∏ –ø–∞–º—É—á–Ω–∏ —Ç–µ–Ω–∏—Å–∫–∏ —Å –º–∞—à–∏–Ω–Ω–∞ –±—Ä–æ–¥–µ—Ä–∏—è –Ω–∞ –ª–æ–≥–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç. –ò–¥–µ–∞–ª–Ω–∏ –∑–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏ —Å—ä–±–∏—Ç–∏—è, –µ–∫–∏–ø–Ω–∏ –æ–±–ª–µ–∫–ª–∞ –∏ –ø—Ä–æ–º–æ—Ü–∏–æ–Ω–∞–ª–Ω–∏ –∫–∞–º–ø–∞–Ω–∏–∏. –ú–∏–Ω–∏–º–∞–ª–Ω–∞ –ø–æ—Ä—ä—á–∫–∞: 10 –±—Ä–æ—è.',
        status: 'published',
        sales_channels: salesChannelId ? [{ id: salesChannelId }] : undefined,
        options: [
          { title: '–ù–∏–≤–æ', values: ['Standard', 'Premium', 'VIP'] }
        ],
        variants: [
          {
            title: 'Standard',
            sku: 'EMBR-TSHIRT-STD',
            manage_inventory: false,
            prices: [
              { amount: 2500, currency_code: 'bgn' }
            ],
            options: {
              '–ù–∏–≤–æ': 'Standard'
            }
          },
          {
            title: 'Premium',
            sku: 'EMBR-TSHIRT-PREM',
            manage_inventory: false,
            prices: [
              { amount: 2200, currency_code: 'bgn' }
            ],
            options: {
              '–ù–∏–≤–æ': 'Premium'
            }
          },
          {
            title: 'VIP',
            sku: 'EMBR-TSHIRT-VIP',
            manage_inventory: false,
            prices: [
              { amount: 2000, currency_code: 'bgn' }
            ],
            options: {
              '–ù–∏–≤–æ': 'VIP'
            }
          }
        ],
        images: [
          { url: 'https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?w=800' }
        ]
      },
      {
        title: '–°—É–±–ª–∏–º–∞—Ü–∏–æ–Ω–µ–Ω –ø–µ—á–∞—Ç –≤—ä—Ä—Ö—É —á–∞—à–∏',
        handle: 'sublimatsionen-pechat-varhu-chashi',
        description: '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –∫–µ—Ä–∞–º–∏—á–Ω–∏ —á–∞—à–∏ —Å –ø—ä–ª–Ω–æ—Ü–≤–µ—Ç–µ–Ω —Å—É–±–ª–∏–º–∞—Ü–∏–æ–Ω–µ–Ω –ø–µ—á–∞—Ç. –£—Å—Ç–æ–π—á–∏–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥—Ö–æ–¥—è—â–æ –∑–∞ –º–∏—è–ª–Ω–∞ –º–∞—à–∏–Ω–∞. –ú–∏–Ω–∏–º–∞–ª–Ω–∞ –ø–æ—Ä—ä—á–∫–∞: 20 –±—Ä–æ—è.',
        status: 'published',
        sales_channels: salesChannelId ? [{ id: salesChannelId }] : undefined,
        options: [
          { title: '–ù–∏–≤–æ', values: ['Standard', 'Premium', 'VIP'] }
        ],
        variants: [
          {
            title: 'Standard',
            sku: 'SUBL-MUG-STD',
            manage_inventory: false,
            prices: [
              { amount: 1200, currency_code: 'bgn' }
            ],
            options: {
              '–ù–∏–≤–æ': 'Standard'
            }
          },
          {
            title: 'Premium',
            sku: 'SUBL-MUG-PREM',
            manage_inventory: false,
            prices: [
              { amount: 1000, currency_code: 'bgn' }
            ],
            options: {
              '–ù–∏–≤–æ': 'Premium'
            }
          },
          {
            title: 'VIP',
            sku: 'SUBL-MUG-VIP',
            manage_inventory: false,
            prices: [
              { amount: 900, currency_code: 'bgn' }
            ],
            options: {
              '–ù–∏–≤–æ': 'VIP'
            }
          }
        ],
        images: [
          { url: 'https://images.unsplash.com/photo-1514228742587-6b1558fcca3d?w=800' }
        ]
      },
      {
        title: '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä–µ–Ω –ø–µ—á–∞—Ç –≤—ä—Ä—Ö—É —Ç–µ–∫—Å—Ç–∏–ª',
        handle: 'transferen-pechat-varhu-textil',
        description: '–í–∏—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–µ–Ω –ø–µ—á–∞—Ç –≤—ä—Ä—Ö—É —Ä–∞–∑–ª–∏—á–Ω–∏ –≤–∏–¥–æ–≤–µ —Ç–µ–∫—Å—Ç–∏–ª. –ü–æ–¥—Ö–æ–¥—è—â –∑–∞ —Å–ª–æ–∂–Ω–∏ –¥–∏–∑–∞–π–Ω–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—Å–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.',
        status: 'published',
        sales_channels: salesChannelId ? [{ id: salesChannelId }] : undefined,
        options: [
          { title: '–ù–∏–≤–æ', values: ['Standard', 'Premium', 'VIP'] }
        ],
        variants: [
          {
            title: 'Standard',
            sku: 'TRANS-TEXT-STD',
            manage_inventory: false,
            prices: [
              { amount: 1800, currency_code: 'bgn' }
            ],
            options: {
              '–ù–∏–≤–æ': 'Standard'
            }
          },
          {
            title: 'Premium',
            sku: 'TRANS-TEXT-PREM',
            manage_inventory: false,
            prices: [
              { amount: 1600, currency_code: 'bgn' }
            ],
            options: {
              '–ù–∏–≤–æ': 'Premium'
            }
          },
          {
            title: 'VIP',
            sku: 'TRANS-TEXT-VIP',
            manage_inventory: false,
            prices: [
              { amount: 1400, currency_code: 'bgn' }
            ],
            options: {
              '–ù–∏–≤–æ': 'VIP'
            }
          }
        ],
        images: [
          { url: 'https://images.unsplash.com/photo-1556821840-3a63f95609a7?w=800' }
        ]
      }
    ];

    let createdProducts = [];
    for (const product of products) {
      try {
        const productResponse = await api.post('/admin/products', product);
        const createdProduct = productResponse.data.product;
        createdProducts.push(createdProduct);
        console.log(`‚úÖ Created: ${product.title}`);
        console.log(`   ID: ${createdProduct.id}`);
      } catch (error) {
        console.error(`‚ùå Error creating ${product.title}:`, error.response?.data?.message || error.message);
      }
    }

    console.log(`\n‚úÖ Successfully created ${createdProducts.length} products!`);

    // 4. Try to get publishable API keys (might not be available in all versions)
    console.log('\nüîë Checking for publishable API keys...');
    try {
      const keysResponse = await api.get('/admin/api-keys/publishable');
      if (keysResponse.data?.api_keys && keysResponse.data.api_keys.length > 0) {
        console.log('‚úÖ Publishable API Key:', keysResponse.data.api_keys[0].token);
      } else {
        console.log('‚ÑπÔ∏è  No publishable API keys found. You may need to create one via the admin dashboard.');
      }
    } catch (error) {
      console.log('‚ÑπÔ∏è  Publishable API keys endpoint not available. Access products directly or create via admin UI.');
    }

    console.log('\n' + '='.repeat(80));
    console.log('‚ú® MEDUSA SETUP COMPLETE! ‚ú®');
    console.log('='.repeat(80));
    console.log('\nüìã Access Information:');
    console.log(`   Medusa Admin: http://localhost:9000/app`);
    console.log(`   Email: ${ADMIN_EMAIL}`);
    console.log(`   Password: ${ADMIN_PASSWORD}`);
    console.log(`   Sales Channel: ${salesChannelId || 'N/A'}`);
    console.log(`\n   Products Created: ${createdProducts.length}`);
    createdProducts.forEach(p => {
      console.log(`   - ${p.title} (${p.variants?.length || 0} variants)`);
    });
    console.log('\n' + '='.repeat(80));

  } catch (error) {
    console.error('‚ùå Fatal error during setup:', error.response?.data || error.message);
    process.exit(1);
  }
}

setupMedusaComplete();
