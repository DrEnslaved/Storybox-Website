import fetch from 'node-fetch';

async function seedProduct() {
  const MEDUSA_URL = 'http://localhost:9000';
  
  console.log('üå± Seeding Bulgarian product in Medusa...\n');

  try {
    // Authenticate as admin
    console.log('1Ô∏è‚É£ Authenticating...');
    const authResponse = await fetch(`${MEDUSA_URL}/auth/user/emailpass`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'admin@storybox.bg',
        password: 'admin123456'
      })
    });

    if (!authResponse.ok) {
      const errorText = await authResponse.text();
      throw new Error(`Auth failed: ${authResponse.status} - ${errorText}`);
    }

    const authData = await authResponse.json();
    const token = authData.token;
    console.log('   ‚úÖ Authenticated\n');

    // Get regions
    console.log('2Ô∏è‚É£ Fetching regions...');
    const regionsResponse = await fetch(`${MEDUSA_URL}/admin/regions`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    const regionsData = await regionsResponse.json();
    let regionId = regionsData.regions?.find(r => r.currency_code === 'bgn')?.id;

    // Create Bulgaria region if doesn't exist
    if (!regionId) {
      console.log('   Creating Bulgaria region...');
      const createRegionResponse = await fetch(`${MEDUSA_URL}/admin/regions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          name: 'Bulgaria',
          currency_code: 'bgn',
          countries: ['bg'],
          payment_providers: [],
          fulfillment_providers: [],
          tax_rate: 20
        })
      });

      if (createRegionResponse.ok) {
        const regionData = await createRegionResponse.json();
        regionId = regionData.region.id;
        console.log(`   ‚úÖ Region created: ${regionId}\n`);
      } else {
        const errorText = await createRegionResponse.text();
        console.log(`   ‚ö†Ô∏è  Could not create region: ${errorText}`);
        // Use first available region
        regionId = regionsData.regions?.[0]?.id;
      }
    } else {
      console.log(`   ‚úÖ Found Bulgaria region: ${regionId}\n`);
    }

    // Create product
    console.log('3Ô∏è‚É£ Creating product...');
    const productData = {
      title: '–ë—ä–ª–≥–∞—Ä—Å–∫–∞ –ë—Ä–æ–¥–∏—Ä–∞–Ω–∞ –†–∏–∑–∞',
      handle: 'bulgarska-brodirana-riza',
      description: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∞ —Ä–∏–∑–∞ —Å —Ä—ä—á–Ω–∞ –±—Ä–æ–¥–µ—Ä–∏—è. –ò–∑—Ä–∞–±–æ—Ç–µ–Ω–∞ –æ—Ç 100% –ø–∞–º—É–∫ —Å –Ω–∞—Ä–æ–¥–Ω–∏ –º–æ—Ç–∏–≤–∏. –ü–µ—Ä—Ñ–µ–∫—Ç–Ω–∞ –∑–∞ —Å–ø–µ—Ü–∏–∞–ª–Ω–∏ –ø–æ–≤–æ–¥–∏ –∏ –∫—É–ª—Ç—É—Ä–Ω–∏ —Å—ä–±–∏—Ç–∏—è.',
      is_giftcard: false,
      status: 'published',
      options: [
        {
          title: '–†–∞–∑–º–µ—Ä'
        }
      ],
      variants: [
        {
          title: 'S',
          sku: 'BGR-SHIRT-S',
          manage_inventory: false,
          prices: [
            {
              amount: 12000, // 120 BGN in cents
              currency_code: 'bgn'
            }
          ],
          options: {
            '–†–∞–∑–º–µ—Ä': 'S'
          }
        },
        {
          title: 'M',
          sku: 'BGR-SHIRT-M',
          manage_inventory: false,
          prices: [
            {
              amount: 12000,
              currency_code: 'bgn'
            }
          ],
          options: {
            '–†–∞–∑–º–µ—Ä': 'M'
          }
        },
        {
          title: 'L',
          sku: 'BGR-SHIRT-L',
          manage_inventory: false,
          prices: [
            {
              amount: 12000,
              currency_code: 'bgn'
            }
          ],
          options: {
            '–†–∞–∑–º–µ—Ä': 'L'
          }
        },
        {
          title: 'XL',
          sku: 'BGR-SHIRT-XL',
          manage_inventory: false,
          prices: [
            {
              amount: 12000,
              currency_code: 'bgn'
            }
          ],
          options: {
            '–†–∞–∑–º–µ—Ä': 'XL'
          }
        }
      ],
      metadata: {
        material: '100% –ø–∞–º—É–∫',
        origin: '–ë—ä–ª–≥–∞—Ä–∏—è',
        category_bg: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ –æ–±–ª–µ–∫–ª–æ'
      }
    };

    const createProductResponse = await fetch(`${MEDUSA_URL}/admin/products`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(productData)
    });

    if (!createProductResponse.ok) {
      const errorText = await createProductResponse.text();
      console.error(`   ‚ùå Failed to create product: ${createProductResponse.status}`);
      console.error(`   Error: ${errorText}`);
      throw new Error('Product creation failed');
    }

    const productResult = await createProductResponse.json();
    const product = productResult.product;

    console.log(`   ‚úÖ Product created!\n`);
    console.log('üì¶ Product Details:');
    console.log(`   ID: ${product.id}`);
    console.log(`   Title: ${product.title}`);
    console.log(`   Handle: ${product.handle}`);
    console.log(`   Status: ${product.status}`);
    console.log(`   Variants: ${product.variants?.length || 0}`);
    
    if (product.variants) {
      console.log('\n   Variants:');
      product.variants.forEach(v => {
        const price = v.prices?.find(p => p.currency_code === 'bgn');
        console.log(`     ‚Ä¢ ${v.title} (${v.sku}) - ${price ? (price.amount / 100).toFixed(2) + ' BGN' : 'No price'}`);
      });
    }

    console.log('\nüéâ Product seeding complete!');
    console.log('\n‚úÖ Next steps:');
    console.log('   1. Visit http://localhost:3000/shop to see the product');
    console.log('   2. Visit http://localhost:9000/app to manage products in Medusa Admin');

  } catch (error) {
    console.error('\n‚ùå Error:', error.message);
    console.error(error);
    process.exit(1);
  }
}

seedProduct();
